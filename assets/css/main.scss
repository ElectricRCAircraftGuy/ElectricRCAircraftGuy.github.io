---
# Only the main Sass file needs front matter (the dashes are enough)
---

@charset "utf-8";

/*
----------------------------------------------------------------------------------------------------
GS: to override any SASS variables in "_variables.scss", you must place new values here, BEFORE
the `@import` statements, as that is the point where the variables are used!
See: https://github.com/mmistakes/minimal-mistakes/issues/2278#issuecomment-541484035
----------------------------------------------------------------------------------------------------
*/

/*
- Let's override the stinking `$max-width` variable in "_variables.scss", which controls the
  maximum width of the entire content on the screen, as it is currently set to `$x-large`, which
  is only 1280px, which is too small to take up the entire width on a standard
  1920 (px wide) x 1080 (px tall) display, and WAY TOO SMALL for a 3840 x 2160 4k display!
This is what is currently in "_variables.scss" under the "Breakpoints" section:

        $small: 600px !default;
        $medium: 768px !default;
        $medium-wide: 900px !default;
        $large: 1024px !default;
        $x-large: 1280px !default;
        $max-width: $x-large !default;

Override $max-width (don't forget the semicolon!):
*/
$max-width: 100%; // default is 1280px

/*
GS: override screen sizes above to optimize for old 1280 (wide) x 1024 low-res monitors, new 3840
(wide) x 2160 4k monitors, standard (modern) 1920 (wide) x 1080 monitors, and tiny modern smart
phones with high-resolution 1920 (tall) x 1080 (wide) displays.

Note: experimenting shows that displays WITH A WEB-PAGE VIEWABLE AREA (ie: subtracting the scroll
bar, Ubuntu left-hand "start menu", and any other margins inside or outside the edges of the browser
window) **greater than or equal to** (ie: `>=`, NOT `<` !) these variable values below are
considered that size!
- You can verify this by right-clicking in Chrome --> Inspect, then click the 3 dots in the
top-right of the inspect window, choose the bottom dock position to not interfere with the window
width, then drag the window to resize it. As you do so, you'll see Chrome display the window size
live (while resizing it) in the top-right of the window.
*/
$small: 600px;     // default is 600px
$medium: 768px;    // default is 768px
$large: 1024px;    // default is 1024px [my old 1280x1024 low-res monitor fits here]
$x-large: 1280px;  // default is 1280px [my 1920x1080 laptop, my 3840x2160 4k 32" monitor, AND
                   // my 1920x1080 Google Pixel 2 5-inch phone ALL fit into this category!]

/* For background color for code highlighting between back-ticks: ex: `some code`; same as
GitHub--CSS variable `--color-markdown-code-bg`; inspected via a browser. */
$code-background-color: rgba(27,31,35,0.05); /* overrides val in "_variables.scss" */


/* ============ OVERRIDE SASS (*.scss file) VARIABLES BY PLACING THEM ABOVE ===================== */

@import "minimal-mistakes/skins/{{ site.minimal_mistakes_skin | default: 'default' }}"; // skin
@import "minimal-mistakes"; // main partials

/* ============ OVERRIDE CSS STYLES BY PLACING THEM BELOW ======================================= */


/*
----------------------------------------------------------------------------------------------------
GS: override any CSS with new CSS styles AFTER the `@import "minimal-mistakes";` line just above!
See: https://github.com/mmistakes/minimal-mistakes/issues/1219#issuecomment-326809412
Anything you place after this point will therefore "cascade and override" the previous CSS styles.
----------------------------------------------------------------------------------------------------
*/

/*
GS: Decrease font sizes of the entire website.
Defaults for small, medium, large, and x-large screens are:
16, 18, 20, and 22px, in that order. All other font sizes are "em"
[typography unit](https://en.wikipedia.org/wiki/Em_(typography)) multipliers of these pixel
(px) values, and are therefore relative to and changed by these singular pixel values.
See: https://github.com/mmistakes/minimal-mistakes/issues/1219#issuecomment-326809412
- It looks like the screen pixel sizes to move into each new "size" category are defined in
  the "Breakpoints" section of "_variables.scss"?
- See also the "type scale" section of "_sass/minimal-mistakes/_variables.scss", for where various
  em units are used to set relative font sizes with names like `$type-size-1`, `$type-size-2`,
  etc.
*/
html
{
  font-size: 14px; // change to whatever (default: 16px?)

  @include breakpoint($small) {
    font-size: 14px; // change to whatever (default: 16px?)
  }

  @include breakpoint($medium) {
    font-size: 16px; // change to whatever (default: 18px?)
  }

  @include breakpoint($large) {
    font-size: 16px; // change to whatever (default: 20px?)
  }

  @include breakpoint($x-large) {
    font-size: 16px; // change to whatever (default: 22px?)
  }
}

/* GS: blockquotes: override styles in "_base.scss"; */
blockquote {
  margin-left: 1em;
  /*border-left-color: #C8CCD0; /* GS: color borrowed from Stack Overflow, using a color picker */
  border-left-color: #DFE2E5; /* Same as GitHub, inspecting the CSS in a browser */
  /*color: #535a60;*/ /* same as Stack Overflow--CSS variable `--black-600`, inspected in browser */
  color: #6A737D; /* same as GitHub--CSS variable `--color-text-tertiary`, inspected in browser */

  /* Override `font-style: italic;` in "_base.scss" */
  /* See my Q:
  https://talk.jekyllrb.com/t/want-to-use-default-github-jekyll-code-formatting-and-quote-formatting/5221/2 */
  font-style: normal;
}

/* ----- CODE ----------------------------------------------------------------------------------- */

/*
In "_base.scss", the CSS formatting for the `code` class is applied to `td > code`, which means it
ONLY applies to `code` classes which are **children of** (`>`) HTML `td` elements. I want the
light grey background color to be applied to ALL code blocks, however, even code words between
back-ticks (ex: `some word`) in headings (`<h2>`, `<h1>`, or other heading elements, for instance)
or inside other non-`td` elements. To do this, simply apply the CSS `background` property to ALL
`code` classes, like this:
*/
code {
  /* force background code highlighting inside headings & all other elements too */
  background: $code-background-color;
}

/* ----- IMAGES & CONTAINERS -------------------------------------------------------------------- */

/*
GS: CSS inspired by my own answer here:
https://stackoverflow.com/questions/12090472/github-readme-md-center-image/62383408#62383408

See also:
0. *****[my own document] https://github.com/ElectricRCAircraftGuy/eRCaGuy_hello_world/blob/master/markdown/github_readme_center_and_align_images.md
1. ****https://www.w3schools.com/howto/howto_css_image_center.asp
1.5*****https://www.w3schools.com/howto/howto_css_images_side_by_side.asp
2. ***https://www.w3schools.com/css/css3_images.asp
3. **https://www.w3schools.com/html/html_images.asp
4. https://stackoverflow.com/questions/20917632/how-to-align-an-image-at-middle-of-wrapped-text
*/

/* align left WITH word wrap to the right of the element */
.alignLeftWrap
{
  display: inline-block;
  float: left;
  margin-left: 0px;
  /* provide a gap between the element and the text to its right */
  margin-right: 15px;
  /*width: 60%;*/
}

/* align right WITH word wrap to the left of the element */
.alignRightWrap
{
  display: inline-block;
  float: right;
  /* provide a gap between the element and the text to its left */
  margin-left: 15px;
  margin-right: 0px;
  /*width: 60%;*/
}


/* align left withOUT word wrap--the element goes on its own line */
.alignLeftNoWrap
{
  display: block;
  float: none;
  margin-left: 0px;
  margin-right: auto;
  /*width: 60%;*/
}

/* align center withOUT word wrap--the element goes on its own line */
.alignCenterNoWrap
{
  display: block;
  float: none;
  /* Set both the left and right margins to `auto` to cause the img/element to be centered. */
  margin-left: auto;
  margin-right: auto;
  /*width: 60%;*/
}

/* align right withOUT word wrap--the element goes on its own line */
.alignRightNoWrap
{
  display: block;
  float: none;
  margin-left: auto;
  margin-right: 0px;
  /*width: 60%;*/
}


/* Force this element to NOT wrap around any floating elements above it which have word wrap.
Therefore, this element will begin on a new line, even if it would otherwise try to wrap
around the above element instead. */
.noWrapAroundAbove
{
  clear: both;
}
